#  -*- coding: utf-8 -*-
#  vim: tabstop=4 shiftwidth=4 softtabstop=4

#  Copyright (c) 2014, GEM Foundation

#  OpenQuake is free software: you can redistribute it and/or modify it
#  under the terms of the GNU Affero General Public License as published
#  by the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.

#  OpenQuake is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

#  You should have received a copy of the GNU Affero General Public License
#  along with OpenQuake.  If not, see <http://www.gnu.org/licenses/>.

import os
import operator
import collections

import numpy

from openquake.commonlib.export import export, ds_export
from openquake.commonlib.writers import (
    scientificformat, floatformat, save_csv)
from openquake.commonlib import hazard_writers
from openquake.hazardlib.imt import from_string


class SES(object):
    """
    Stochastic Event Set: A container for 1 or more ruptures associated with a
    specific investigation time span.
    """
    # the ordinal must be > 0: the reason is that it appears in the
    # exported XML file and the schema constraints the number to be
    # nonzero
    def __init__(self, ruptures, investigation_time, ordinal=1):
        self.ruptures = sorted(ruptures, key=operator.attrgetter('tag'))
        self.investigation_time = investigation_time
        self.ordinal = ordinal

    def __iter__(self):
        for sesrup in self.ruptures:
            yield sesrup.export()


class SESCollection(object):
    """
    Stochastic Event Set Collection
    """
    def __init__(self, idx_ses_dict, sm_lt_path, investigation_time=None):
        self.idx_ses_dict = idx_ses_dict
        self.sm_lt_path = sm_lt_path
        self.investigation_time = investigation_time

    def __iter__(self):
        for idx, sesruptures in sorted(self.idx_ses_dict.iteritems()):
            yield SES(sesruptures, self.investigation_time, idx)


@export.add(('ses', 'xml'))
def export_ses_xml(key, export_dir, fname, ses_coll):
    """
    Export a Stochastic Event Set Collection
    """
    dest = os.path.join(export_dir, fname)
    writer = hazard_writers.SESXMLWriter(dest, '_'.join(ses_coll.sm_lt_path))
    writer.serialize(ses_coll)
    return {fname: dest}


@export.add(('ses', 'csv'))
def export_ses_csv(key, export_dir, fname, ses_coll):
    """
    Export a Stochastic Event Set Collection
    """
    dest = os.path.join(export_dir, fname)
    rows = []
    for ses in ses_coll:
        for sesrup in ses:
            rows.append([sesrup.tag, sesrup.seed])
    save_csv(dest, sorted(rows, key=operator.itemgetter(0)))
    return {fname: dest}


@ds_export.add(('ruptures', 'csv'))
def ds_export_ses_csv(key, dstore):
    """
    Export a Stochastic Event Set Collection
    """
    dest = dstore.export_path(key)
    rows = []
    for sesrup in dstore['ruptures']:
        rows.append([sesrup.tag, sesrup.seed])
    save_csv(dest, sorted(rows, key=operator.itemgetter(0)))
    return dest


# #################### export Ground Motion fields ########################## #

class GmfSet(object):
    """
    Small wrapper around the list of Gmf objects associated to the given SES.
    """
    def __init__(self, gmfset):
        self.gmfset = gmfset
        self.investigation_time = None
        self.stochastic_event_set_id = 1

    def __iter__(self):
        return iter(self.gmfset)

    def __nonzero__(self):
        return bool(self.gmfset)

    def __str__(self):
        return (
            'GMFsPerSES(investigation_time=%f, '
            'stochastic_event_set_id=%s,\n%s)' % (
                self.investigation_time,
                self.stochastic_event_set_id, '\n'.join(
                    sorted(str(g) for g in self.gmfset))))


class GroundMotionField(object):
    """
    The Ground Motion Field generated by the given rupture
    """
    def __init__(self, imt, sa_period, sa_damping, rupture_id, gmf_nodes):
        self.imt = imt
        self.sa_period = sa_period
        self.sa_damping = sa_damping
        self.rupture_id = rupture_id
        self.gmf_nodes = gmf_nodes

    def __iter__(self):
        return iter(self.gmf_nodes)

    def __getitem__(self, key):
        return self.gmf_nodes[key]

    def __str__(self):
        # string representation of a _GroundMotionField object showing the
        # content of the nodes (lon, lat an gmv). This is useful for debugging
        # and testing.
        mdata = ('imt=%(imt)s sa_period=%(sa_period)s '
                 'sa_damping=%(sa_damping)s rupture_id=%(rupture_id)s' %
                 vars(self))
        nodes = sorted(map(str, self.gmf_nodes))
        return 'GMF(%s\n%s)' % (mdata, '\n'.join(nodes))


class GroundMotionFieldNode(object):
    # the signature is not (gmv, x, y) because the XML writer expects
    # a location object
    def __init__(self, gmv, loc):
        self.gmv = gmv
        self.location = loc

    def __lt__(self, other):
        """
        A reproducible ordering by lon and lat; used in
        :function:`openquake.commonlib.hazard_writers.gen_gmfs`
        """
        return (self.location.x, self.location.y) < (
            other.location.x, other.location.y)

    def __str__(self):
        """Return lon, lat and gmv of the node in a compact string form"""
        return '<X=%9.5f, Y=%9.5f, GMV=%9.7f>' % (
            self.location.x, self.location.y, self.gmv)


class GmfCollection(object):
    """
    Object converting the parameters

    :param sitecol: SiteCollection
    :rupture_tags: tags of the ruptures
    :gmfs_by_imt: dictionary of GMFs by IMT

    into an object with the right form for the EventBasedGMFXMLWriter.
    Iterating over a GmfCollection yields GmfSet objects.
    """
    def __init__(self, sitecol, rupture_tags, gmfs_by_imt):
        self.sitecol = sitecol
        self.rupture_tags = rupture_tags
        self.gmfs_by_imt = gmfs_by_imt
        self.imts = list(gmfs_by_imt.dtype.fields)

    def __iter__(self):
        gmfset = []
        for imt_str in self.imts:
            gmfs = self.gmfs_by_imt[imt_str]
            imt, sa_period, sa_damping = from_string(imt_str)
            for rupture_tag, gmf in zip(self.rupture_tags, gmfs):
                nodes = (GroundMotionFieldNode(gmv, site.location)
                         for site, gmv in zip(self.sitecol, gmf))
                gmfset.append(
                    GroundMotionField(
                        imt, sa_period, sa_damping, rupture_tag, nodes))
        yield GmfSet(gmfset)


@export.add(('gmf', 'xml'))
def export_gmf_xml(key, export_dir, fname, sitecol, rupture_tags, gmfs,
                   gsim_path):
    """
    :param key: output_type and export_type
    :param export_dir: the directory where to export
    :param fname: name of the exported file
    :param sitecol: site collection
    :param rupture_tags: a list of rupture tags
    :param gmfs: a matrix of ground motion fields of shape (R, N)
    :param gsim_path: a tuple with the path in the GSIM logic tree
    """
    dest = os.path.join(export_dir, fname)
    writer = hazard_writers.EventBasedGMFXMLWriter(
        dest, sm_lt_path='', gsim_lt_path=gsim_path)
    with floatformat('%12.8E'):
        writer.serialize(GmfCollection(sitecol, rupture_tags, gmfs))
    return {key: [dest]}


@export.add(('gmf', 'csv'))
def export_gmf_csv(key, export_dir, fname, sites, rupture_tags, gmfs,
                   gsim_path=None):
    """
    :param key: output_type and export_type
    :param export_dir: the directory where to export
    :param fname: name of the exported file
    :param sites: a filtered site collection
    :param rupture_tags: a list of rupture tags
    :param gmfs: a list of ground motion fields
    :param gsim_path: a tuple with the path in the GSIM logic tree
    """
    dest = os.path.join(export_dir, fname)
    imts = list(gmfs.dtype.fields)
    indices = ' '.join(map(str, sites.indices)) \
              if sites.indices is not None else ''
    # the csv file has the form
    # tag,indices,gmvs_imt_1,...,gmvs_imt_N
    save_csv(dest, [[tag, indices] + [gmf[imt] for imt in imts]
                    for tag, gmf in zip(rupture_tags, gmfs)])
    return {key: [dest]}

# ####################### export hazard curves ############################ #

HazardCurve = collections.namedtuple('HazardCurve', 'location poes')


@export.add(('hazard_curves', 'csv'))
def export_hazard_curves_csv(key, export_dir, fname, sitecol, curves_by_imt,
                             imtls, investigation_time=None):
    """
    Export the curves of the given realization into XML.

    :param key: output_type and export_type
    :param export_dir: the directory where to export
    :param fname: name of the exported file
    :param sitecol: site collection
    :param curves_by_imt: dictionary with the curves keyed by IMT
    """
    dest = os.path.join(export_dir, fname)
    nsites = len(sitecol)
    # build a matrix of strings with size nsites * (num_imts + 1)
    # the + 1 is needed since the 0-th column contains lon lat
    rows = numpy.empty((nsites, len(imtls) + 1), dtype=object)
    for sid, lon, lat in zip(range(nsites), sitecol.lons, sitecol.lats):
        rows[sid, 0] = '%s %s' % (lon, lat)
    for i, imt in enumerate(sorted(curves_by_imt), 1):
        for sid, curve in zip(range(nsites), curves_by_imt[imt]):
            rows[sid, i] = scientificformat(curve, fmt='%11.7E')
    save_csv(dest, rows)
    return {fname: dest}


@export.add(('hazard_curves', 'xml'))
def export_hazard_curves_xml(key, export_dir, fname, sitecol, curves_by_imt,
                             imtls, investigation_time):
    """
    Export the curves of the given realization into XML.

    :param key: output_type and export_type
    :param export_dir: the directory where to export
    :param fname: name of the exported file
    :param sitecol: site collection
    :param rlz: realization instance
    :param curves_by_imt: dictionary with the curves keyed by IMT
    :param imtls: dictionary with the intensity measure types and levels
    :param investigation_time: investigation time in years
    """
    mdata = []
    hcurves = []
    for imt_str, imls in sorted(imtls.iteritems()):
        hcurves.append(
            [HazardCurve(site.location, poes)
             for site, poes in zip(sitecol, curves_by_imt[imt_str])])
        imt = from_string(imt_str)
        mdata.append({
            'quantile_value': None,
            'statistics': None,
            'smlt_path': '',
            'gsimlt_path': '',
            'investigation_time': investigation_time,
            'imt': imt[0],
            'sa_period': imt[1],
            'sa_damping': imt[2],
            'imls': imls,
        })
    dest = os.path.join(export_dir, fname)
    writer = hazard_writers.MultiHazardCurveXMLWriter(dest, mdata)
    with floatformat('%12.8E'):
        writer.serialize(hcurves)
    return {fname: dest}


@export.add(('hazard_stats', 'csv'))
def export_stats_csv(key, export_dir, fname, sitecol, data_by_imt):
    """
    Export the scalar outputs.

    :param key: output_type and export_type
    :param export_dir: the directory where to export
    :param fname: file name
    :param sitecol: site collection
    :param data_by_imt: dictionary of floats keyed by IMT
    """
    dest = os.path.join(export_dir, fname)
    rows = []
    for imt in sorted(data_by_imt):
        row = [imt]
        for col in data_by_imt[imt]:
            row.append(scientificformat(col))
        rows.append(row)
    save_csv(dest, numpy.array(rows).T)
    return {fname: dest}


@export.add(('uhs', 'csv'))
def export_uhs_csv(key, export_dir, fname, sitecol, hmaps):
    """
    Export the scalar outputs.

    :param key: output_type and export_type
    :param export_dir: the directory where to export
    :param fname: file name
    :param sitecol: site collection
    :param hmaps:
        an array N x I x P where N is the number of sites,
        I the number of IMTs of SA type, and P the number of poes
    """
    dest = os.path.join(export_dir, fname)
    rows = ([[lon, lat]] + list(row)
            for lon, lat, row in zip(sitecol.lons, sitecol.lats, hmaps))
    save_csv(dest, rows)
    return {fname: dest}
